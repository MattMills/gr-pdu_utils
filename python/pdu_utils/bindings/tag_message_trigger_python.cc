/*
 * Copyright 2022 Free Software Foundation, Inc.
 *
 * This file is part of GNU Radio
 *
 * SPDX-License-Identifier: GPL-3.0-or-later
 *
 */

/***********************************************************************************/
/* This file is automatically generated using bindtool and can be manually edited  */
/* The following lines can be configured to regenerate this file during cmake      */
/* If manual edits are made, the following tags should be modified accordingly.    */
/* BINDTOOL_GEN_AUTOMATIC(0)                                                       */
/* BINDTOOL_USE_PYGCCXML(0)                                                        */
/* BINDTOOL_HEADER_FILE(tag_message_trigger.h)                                        */
/* BINDTOOL_HEADER_FILE_HASH(05f0491e5e8496d4f03c804f3b71c48e)                     */
/***********************************************************************************/

#include <pybind11/complex.h>
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>

namespace py = pybind11;

#include <gnuradio/pdu_utils/tag_message_trigger.h>
// pydoc.h is automatically generated in the build directory
#include <tag_message_trigger_pydoc.h>


template <typename T>
void bind_tag_message_trigger_template(py::module& m, const char* classname)
{

    using tag_message_trigger = ::gr::pdu_utils::tag_message_trigger<T>;

    py::class_<tag_message_trigger,
               gr::sync_block,
               gr::block,
               gr::basic_block,
               std::shared_ptr<tag_message_trigger>>(m, classname)
        .def(py::init(&gr::pdu_utils::tag_message_trigger<T>::make),
             py::arg("trigger_key"),
             py::arg("arming_key"),
             py::arg("message"),
             py::arg("holdoff"),
             py::arg("samp_rate") = 0,
             py::arg("start_time") = 0,
             py::arg("delay_time") = 0,
             py::arg("tpdu_mode") = false)
        .def("set_trigger_key", &tag_message_trigger::set_trigger_key, py::arg("key"))
        .def("set_arming_key", &tag_message_trigger::set_arming_key, py::arg("key"))
        .def("set_time_tag_key", &tag_message_trigger::set_time_tag_key, py::arg("key"))
        .def("set_message", &tag_message_trigger::set_message, py::arg("msg"))
        .def("set_holdoff", &tag_message_trigger::set_holdoff, py::arg("holdoff"))
        .def("set_samp_rate", &tag_message_trigger::set_samp_rate, py::arg("samp_rate"))
        .def("set_start_time",
             &tag_message_trigger::set_time_tag_key,
             py::arg("start_time"))
        .def(
            "set_delay_time", &tag_message_trigger::set_delay_time, py::arg("delay_time"))
        .def("set_tx_limit", &tag_message_trigger::set_tx_limit, py::arg("tx_limit"));
}


void bind_tag_message_trigger(py::module& m)
{

    bind_tag_message_trigger_template<unsigned char>(m, "tag_message_trigger_b");
    bind_tag_message_trigger_template<short>(m, "tag_message_trigger_s");
    bind_tag_message_trigger_template<int32_t>(m, "tag_message_trigger_i");
    bind_tag_message_trigger_template<float>(m, "tag_message_trigger_f");
    bind_tag_message_trigger_template<gr_complex>(m, "tag_message_trigger_c");
}
